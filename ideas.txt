JARGON
--> subject --> pier@usrz.com                        --> identifies "who"
--> browser --> f3ebffa1-9593-41cd-8937-b2bc4851df44 --> identifies a browser, has a secret
--> service --> 66071dab-679c-4cf3-b331-f2b5f68d7f63 --> identifies a service, has an ecdsa key

browser should do scram first w/o subject/service

----> BROWSER w/o identifier

... we are still vulnerable to dictionary attacks if a man in the middle
    can eavesdrop on the connection, as in:
    - MIM can derive the auth_message (it's in the clear)
    - MIM gets a dictionary of all passwords, computes KDF
    - MIM tries replicating session
    - for https://crackstation.net/buy-crackstation-wordlist-password-cracking-dictionary.htm
      - 1,493,677,782 passwords
      - SHA256 w/ 65536 is ~ 50ms per core, 20 pwd/sec
      - AWS c3.8xlarge = 32 cores, $1.68/hour, 640 pwd/sec
      - approx 648h or 27 days on a single machine
      - around US$ 1089
      - FUCK!
... webcrypto https://infotechinc.github.io/password-based-key-derivation-in-browser/

deriveAKey('password', 'SHA-1', 500000, 'salt'); ---> CHROME 366ms (native)
javaScript....
INFO [Chrome 42.0.2311 | Success: 5700 ms
INFO [Firefox 37.0.0   | Success: 4392 ms
INFO [Safari 8.0.5     | Success: 5472 ms

================================================================================

what do I want?

new/wrong device            :=> password, one_time_pass
revalidate device (daily)   :=> password, device_secret
revalidate session (always) :=> session,  device_secret


================================================================================

client_first: { // client first message (base64)
  epk: ... base64 ... // ecdhe public key

  sub: "pier@usrz.com", // the subject
  dev: "edafd6da-ddb1-4aa7-b4ab-7eba308609a8", // device identifier
  app: "584ee502-b8e0-499b-8377-d1fd066137ab", // application identifier
  svc: "9a708c42-795b-43bc-9325-cf3757b3c828", // service identifier
}

server_first: { // server first message (base64)
  epk: ... base64 ... // ecdhe public key
  kdf: { // kdf specification
    algorithm: "PBKDF2",
    salt: ... base64 ..., /// the salt
    hash: "SHA256",
    iterations: 10240
  },
  shared_key: "device_secret" / "one_time_password" / ...
}

AUTH_MESSAGE: ecdsa(keys) + *REQ* + cfm + sfm

client_proof: ... base64 ... // proof

server_proof: ... base64 ... // proof
bearer_token: ... base64 ... // token

DEVICE: {
  uid: ... uuid ...,
  name: ... description ...,
  key: ... base64 ...,
  sig: ... base64 ...
}

================================================================================

subject_proof := client_proof(password, otp)
session_proof := client_proof(browser.key, browser.secret)
browser_proof := client_proof(password, browser.secret)


I have nothing:

C <- subject
S -> ec_key, kdf_spec, proof: [ password, otp ]
C <- client_proof(password, otp)
* 401 Unauthorized: subject/password/otp mismatch
  +- S -> error
* 200 Ok:
  +- S -> otp_proof(password, otp)

I have a device:

C <- subject, device
S -> ec_key, proof: [ session, device ]
C <- client_proof(session, device)
* 401 Unauthorized:
  ~ try "I have nothing"
* 200 Ok:
  S -> server_proof(session, device)
* 201 Created:
  S -> ec_key, kdf_spec, proof: [ password, device ]
  C <- client_proof(password, device)
  * 401 Unauthorized: subject/password/device mismatch
    +- S -> ERROR
  * 200 Ok
    +- S -> client_proof(password, device)
* 201 Created:
  S -> ec_key, kdf_spec, proof: [ password, otp ]
  C <- client_proof(password, otp)
  * 401 Unauthorized: subject/password/device mismatch
    +- S -> ERROR
  * 200 Ok
    +- S -> client_proof(password, otp)




/* ========================================================================== */

>>>>> CLIENT REQUESTS
 { client_first: "... base64 ..." }
<<<<< SERVER RESPONDS
 { client_first: "... base64 ..." ,
   server_first: "... base64 ..." }

>>>>> CLIENT REQUESTS
 { client_first: "... base64 ..." ,
   server_first: "... base64 ..." ,
   client_final: "... base64 ..." }
<<<<< SERVER RESPONDS
 { client_first: "... base64 ..." ,
   server_first: "... base64 ..." ,
   client_final: "... base64 ..." ,
   server_final: "... base64 ..." }

/* ========================================================================== */

BEARER_TOKEN := ... subject, browser, service, encrypted_shared_key, ...
 -> iss -> issuer (identify key for encryption?)
 -> sub -> subject
 -> aud -> audience (service)
 -> azp -> authorized party (browser)
 -> jti -> jwt id (encrypt shared key?)
 -> exp, nbf, iat -> times
 -- http://www.iana.org/assignments/jwt/jwt.xhtml

